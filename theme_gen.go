// Code generated by fyne-theme-generator

package main

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
)

type injectorTheme struct{}

func (injectorTheme) Color(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	switch c {
	case theme.ColorNameBackground:
		return color.NRGBA{R: 0x1C, G: 0x1C, B: 0x1C, A: 0xFF}
	case theme.ColorNameOverlayBackground:
		return color.NRGBA{R: 0x1C, G: 0x1C, B: 0x1C, A: 0xFF}
	// case theme.ColorNameButton:
	// 	return color.NRGBA{R: 0x43, G: 0x43, B: 0x43, A: 0xf9}
	// case theme.ColorNameDisabledButton:
	// 	return color.NRGBA{R: 0x26, G: 0x26, B: 0x26, A: 0xff}
	// case theme.ColorNameDisabled:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0x42}
	case theme.ColorNameError:
		return color.NRGBA{R: 0xf3, G: 0x12, B: 0x1, A: 0xff}
	case theme.ColorNameFocus:
		return color.NRGBA{R: 0x53, G: 0x9C, B: 0x33, A: 0xFF} // Replaced with #539c33
	// case theme.ColorNameForeground:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xff}
	// case theme.ColorNameHover:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xf}
	case theme.ColorNameInputBackground:
		return color.NRGBA{R: 0x1C, G: 0x1C, B: 0x1C, A: 0xFF}
	// case theme.ColorNamePlaceHolder:
	// 	return color.NRGBA{R: 0xb2, G: 0xb2, B: 0xb2, A: 0xff}
	// case theme.ColorNamePressed:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0x66}
	case theme.ColorNamePrimary:
		return color.NRGBA{R: 0x53, G: 0x9C, B: 0x33, A: 0xFF} // Replaced with #539c33
	case theme.ColorNameHeaderBackground:
		return color.NRGBA{R: 0x1C, G: 0x1C, B: 0x1C, A: 0xFF}
	// case theme.ColorNameScrollBar:
	// 	return color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0x99}
	// case theme.ColorNameShadow:
	// 	return color.NRGBA{R: 0x8, G: 0x8, B: 0x8, A: 0x79}
	// case theme.ColorNameSeparator:
	// 	return color.RGBA{R: 0x26, G: 0x26, B: 0x26, A: 0xff}
	case theme.ColorNameHyperlink:
		return color.NRGBA{R: 0x53, G: 0x9C, B: 0x33, A: 0xFF} // Replaced with #539c33
	case theme.ColorNameMenuBackground:
		return color.NRGBA{R: 0x1C, G: 0x1C, B: 0x1C, A: 0xFF}
	case theme.ColorNameSelection:
		return color.NRGBA{R: 0x53, G: 0x9C, B: 0x33, A: 0x80} // Replaced with #539c33 (semi-transparent)
	// case theme.ColorNameForeground:
	// 	return color.NRGBA{R: 0x1C, G: 0x1C, B: 0x1C, A: 0xFF}
	default:
		return theme.DefaultTheme().Color(c, v)
	}
}

func (injectorTheme) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return theme.DefaultTheme().Font(s)
	}
	if s.Bold {
		if s.Italic {
			return theme.DefaultTheme().Font(s)
		}
		return theme.DefaultTheme().Font(s)
	}
	if s.Italic {
		return theme.DefaultTheme().Font(s)
	}
	return theme.DefaultTheme().Font(s)
}

func (injectorTheme) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

func (injectorTheme) Size(s fyne.ThemeSizeName) float32 {
	switch s {
	case theme.SizeNameCaptionText:
		return 11
	case theme.SizeNameInlineIcon:
		return 20
	case theme.SizeNamePadding:
		return 4
	case theme.SizeNameScrollBar:
		return 16
	case theme.SizeNameScrollBarSmall:
		return 3
	case theme.SizeNameSeparatorThickness:
		return 2
	case theme.SizeNameText:
		return 16
	case theme.SizeNameInputBorder:
		return 2
	default:
		return theme.DefaultTheme().Size(s)
	}
}
